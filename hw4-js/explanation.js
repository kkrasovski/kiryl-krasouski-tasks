1 - '0' + 2 
// в математических выражениях строки преобразвуются в числа. '0' будет равен 0..и дальше произойдёт вычисление

1 - '-0' + 2 
 // тоже самое, '-0' преобразуется в число -0. далее будет простая математическая операция

1 - '-0-' + 'NaN'
 // '-0-' - не может преобразоваться в число. поэтому 1 - '-0-' = NaN   => NaN + 'NaN' +> слаживаются как строки..получаем 'NaNNaN'

'b' + [NaN + 'ba', 'CC'] - {} 
 // т.к. у объекта нет метода valueOf - поэтому используется toString - мы получаем строковое представление объекта '[object Object]'
 //внутри массива  NaN + 'ba' - слаживаются как строки и мы получаем => 'b' + ['NaNba', 'CC'].
 // при сложении чего либо со строкой оператор '+' преобразует второе слогаемой так же в строку. методом toString - массив преобразуется в список значений через запятую
// ПРИ попытке вычитания "строка - строка" получаем NaN

[] + (()=>{})  //  (()=>{}) 
// массив преобразуется в пустую строку, далее происходит сложение двух строк

[] + (()=>({})) //(()=>({}))
// массив преобразуется в пустую строку, далее происходит сложение двух строк

[] + (()=>({}))(); '[object Object]'
// массив преобразуется в пустую строку, (()=>({}))() = преобразуется в строковое представление объекта '[object Object]'
// слаживаем стоки получаем '[object Object]'


[] + (() => new Object(123))() // '123'
// массив преобразуется в строку, оператор +  видит что слева строка и следующее выражение преобразовывает так же в строку, слаживаем две строки

{} + (() => new Object(123))() // 123
// массив преобразуется в строку, оператор +  видит что слева строка и следующее выражение преобразовывает так же в строку, слаживаем две строки
// {} - воспринимается как пустой блок кода т.к перед ним нет никаких операндов, к нему прибавляем 123 т.к. // new Object(123))() 
// new Object возвращает объект такого типа, который соответствует переданному значению т.е Number

(() => new Object(123))() + {} // '123[object Object]'
// (() => new Object(123))() = возвращает 123 (number) (// new Object возвращает объект такого типа, который соответствует переданному значению т.е Number)
// {} преобразуется в пустой объект т.к. перед ним есть + (значеине будет равно '[object Object]').
// Далее знак + видит справа строку '[object Object]' и слаживает всё как строки. Итог строка '123[object Object]'

({}).valueOf() + 1 // '[object Object]1' 
//  ({}) - пустой объект.  valueOf() у пустого объекта нет. С помощью метода obj.toString() преобразуется в строку и возвращает строковое предствление объекта '[object Object]'
// выполянем '[object Object]' + 1 // т.к. слева от  + есть строка, выполняем сложение строк (1 преобразовывается в '1'). получаем строку '[object Object]1'  

{} + 2 // 2
// {} - воспринимается как пустой блок, +2 = 2 (number)

typeof ({}).valueOf() + 2 // 'object2'
// ({}).valueOf() - возвращает строковое предствление объекта '[object Object]'. После typeof = получаем значение типа в виде строки 'object'
// т.к слева от + у нас строка, то слаживаем два значения как строки (2 преобразовывается в '2'). Получаем 'object2'

+{} // NaN
// {} - пустой объект, не может существовать с унарным + впереди. Т.к его представление - '[object Object]' 

+{}+[] // 'NaN
// т.к перед Пустым объектом стоит унарный + получаем NaN;  [] - преобразуется в пустую строку . Сложение NaN  + ' ' => 'NaN'

+[] // 0
// массив преобразовывается в пустую строку, далее унарный 0 преобразовывает строку ('0') число 0

+[]+{} // '0[object Object]'
// массив преобразовывается в пустую строку, перед ним знак '+' Преобразовывает пустую строку в число 0;
// {} = пустой объект преобразовывается в строковое представление объекта '[object Object]'
// 0 + строка => 0 - преобразуется в строку '0'. далее строки склеиваются

+[10, 1]+{} // NaN[object Object]'

// У массивов нет valueOf, поэтому вызывается toString, который возвращает список элементов через запятую. '10,1'
// унаный + призывает преобразовать список элеменов к числу в результате получаем NaN
//{} => '[object Object]'
// NaN - преобразуется в строку 'NaN' т.к ожидается сложение строк. т.к.  '[object Object]' - строка

{} + [10] // 10
// {} пустой блок кода
// [10] = '10'.  + => преобразует в '10' d Number получаем 10
